<?php

namespace AndriesLouw\imagesweserv\Manipulators;

use Jcupitt\Vips\Interpretation;
use Mockery;
use Mockery\MockInterface;
use PHPUnit\Framework\TestCase;

class SharpenTest extends TestCase
{
    private $manipulator;

    public function setUp()
    {
        $this->manipulator = new Sharpen();
    }

    public function tearDown()
    {
        Mockery::close();
    }

    public function testCreateInstance()
    {
        $this->assertInstanceOf('AndriesLouw\imagesweserv\Manipulators\Sharpen', $this->manipulator);
    }

    public function testRun()
    {
        $image = Mockery::mock('Jcupitt\Vips\Image[__get]', [''], function (MockInterface $mock) {
            $mock->shouldReceive('__get')
                ->with('interpretation')
                ->andReturn(Interpretation::SRGB)
                ->once();

            $mock->shouldReceive('sharpen')->with([
                'sigma' => 3,
                'm1' => 5,
                'm2' => 5
            ])->andReturnSelf()->once();

            $mock->shouldReceive('colourspace')
                ->with(Interpretation::SRGB)
                ->andReturnSelf()
                ->once();
        });

        $params = [
            'sharp' => '5,5,3',
            'hasAlpha' => false,
            'is16Bit' => false,
            'isPremultiplied' => false,
        ];

        $this->assertInstanceOf(
            'Jcupitt\Vips\Image',
            $this->manipulator->setParams($params)->run($image)
        );
    }

    public function testGetSharpen()
    {
        $this->assertSame([10, 2, -1.0], $this->manipulator->setParams(['sharp' => '10'])->getSharpen());
        $this->assertSame([50, 2, -1.0], $this->manipulator->setParams(['sharp' => 50.5])->getSharpen());
        $this->assertSame([1, 2, -1.0], $this->manipulator->setParams(['sharp' => null])->getSharpen());
        $this->assertSame([1, 2, -1.0], $this->manipulator->setParams(['sharp' => 'a'])->getSharpen());
        $this->assertSame([1, 2, -1.0], $this->manipulator->setParams(['sharp' => '-1'])->getSharpen());
        $this->assertSame([1, 2, -1.0], $this->manipulator->setParams(['sharp' => '10001'])->getSharpen());
    }
}
